import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;

/**
 * Take a files of several game-states, which is generated by several game-plays. 
 * At each game-state index i: 0, 1, 2, 3, 4, ..., k: 
 * - Only examine that game-play that has at least k game-states. 
 * - For each games-state at index i: compute the RMSE of each estimation. 
 * - Return a matrix that
 * 	+ Has at least k = 10 columns -- we might later want this to be a larger number
 *  + Has as the number of row the number of "acceptable" game-play (i.e. has at least k = 10 game).
 *  The number of row (i.e. the number of acceptable game-play) needs to be larger than 1000
 *  for statistical evaluation to be reliable.
 * 
 * @author Sang T. Truong and Hoang H. Pham
 * @version 1.0
 */
public class HandEstimatorEval {
	/**
	 * @param gameplaysFile
	 * @return 
	 */
	@SuppressWarnings("unchecked")
	public static ArrayList<ArrayList<Double>> evaluatingEstimator(String gameplaysFile, int numGameState) {
		// Load all game-plays from file
		// -----------------------------------------------------------------------------------
		ArrayList<ArrayList<GameState>> gameplays = new ArrayList<ArrayList<GameState>>() ;
		
		try {
			ObjectInputStream in = new ObjectInputStream(new FileInputStream(gameplaysFile));
			gameplays = (ArrayList<ArrayList<GameState>>) in.readObject();
			in.close();
		} catch (FileNotFoundException e) {
			System.out.println("File not found: " + gameplaysFile);
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		
		// -----------------------------------------------------------------------------------
		
		
		ArrayList<ArrayList<Double>> RMSEs = new ArrayList<ArrayList<Double>>();
		for (ArrayList<GameState> gameplay: gameplays)
		{
			if (gameplay.size() > numGameState) {
				ArrayList<Double> temp = new ArrayList<Double>();
				System.out.println("Begin new game");
				for (GameState gs: gameplay)
				{
					// Need to have hand1e as double[] so we can subtract it from prob
					double[] hand1 = new double[52];
					double[] prob0 = gs.getProb0();
					long hand1Bitstring = gs.getHand1();
					
//					System.out.println(GinRummyUtil.bitstringToCards(hand1Bitstring));
//					System.out.println();
					
					for (Card card: GinRummyUtil.bitstringToCards(hand1Bitstring))
					{
						hand1[card.getId()] = 1;
					}
					
					
//					System.out.println(Arrays.toString(hand1));
//					System.out.println();
//					System.out.println(Arrays.toString(prob0));
				
					double[] SE = new double[52];
					for (int i = 0; i < 52; i++) SE[i] = (hand1[i] - 10*prob0[i])*(hand1[i] - 10*prob0[i]);
					double MSE = 0;
					for (int i = 0; i < 52; i++) MSE = MSE + SE[i] / 52.0;
					double RMSE = Math.sqrt(MSE);
//					System.out.println(RMSE);
					temp.add(RMSE);
					if (temp.size() == numGameState) break;
				}
				RMSEs.add(temp);
			}	
		}
		return RMSEs;
	}
	

}
